{% if format == "storyboard" %}

Codeship suggests Node.js 0.10.25, but I want to use the same Node version as on my computer. When I type `node -v` in the terminal, I find out that I use Node `0.10.26`.

![Node Version][screenshot-technology-version]

So I just copy my Node version into the `nvm install` and `nvm use` statements.

Additionally to my node modules, I need to install `jasmine-node` globally to be able to run my {{ tests }}. [add `npm install -g jasmine-node` after `npm install`]

I don't need `npm test` for my {{ tests }}, so I comment it out. Instead, I want to run `jasmine-node spec`. [add `jasmine-node spec` after commented `npm test`]

![Node.js test commands][screenshot-test-commands]

{% elsif format == "blogpost" %}

Codeship suggests Node.js 0.10.25, but you can use whatever Node version you like. To find out the Node version of your project, type `node -v` in the Terminal.

[![Type ruby -v and find out your Ruby version][screenshot-technology-version]][screenshot-technology-version]

Just copy your Node version into the `nvm install` and `nvm use` statements.

If you want to run {{ tests }}, please install `jasmine-node` globally additionally to your node modules. In this case just add `npm install -g jasmine-node` after `npm install`.

You don't need `npm test` for your {{ tests }}, so you can comment it out by adding a hash key before the command. Instead, add `jasmine-node spec` to the test commands to run your {{ tests }}.

[![Comment the test command `npm test` and add `jasmine-node spec`][screenshot-test-commands]][screenshot-test-commands]

{% endif %}
